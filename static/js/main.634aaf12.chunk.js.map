{"version":3,"sources":["index.js"],"names":["Game","props","_this","Object","C_Users_Levi_Documents_GitHub_kanyes_game_of_life_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","C_Users_Levi_Documents_GitHub_kanyes_game_of_life_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_Levi_Documents_GitHub_kanyes_game_of_life_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","isSimulating","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","Board","rows","cols","React","Component","_this2","cellStates","Array","i","fill","updateCells","bind","C_Users_Levi_Documents_GitHub_kanyes_game_of_life_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_0__","surroundingLivingCells","updatedCellStates","r","c","shouldLive","setState","isAlive","livingNeighbors","states","num","row","col","slice","key","_this3","Cell","onClick","handleClick","_this4","cells","map","rowIndex","className","colIndex","renderCell","src","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.634aaf12.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isSimulating: false,\r\n    }\r\n  }\r\n  render() {\r\n    return <Board rows={10} cols={16} />;\r\n  }\r\n}\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //alive is true, dead is false\r\n    //should probably add constants for those\r\n    //and make cellStates immutable too\r\n    let cellStates = new Array(this.props.rows)\r\n    for (let i = 0; i < this.props.rows; i++) {\r\n      cellStates[i] = new Array(this.props.cols).fill(false);\r\n    }\r\n\r\n    this.state = {\r\n      cellStates,\r\n    };\r\n\r\n    //bind stuff\r\n    this.updateCells = this.updateCells.bind(this);\r\n    this.surroundingLivingCells = this.surroundingLivingCells.bind(this);\r\n  }\r\n\r\n  // could probably use .map here instead of nested for loops\r\n  updateCells() {\r\n    //create temporary updatedCellStates array\r\n    let updatedCellStates = new Array(this.props.rows)\r\n    for (let i = 0; i < this.props.cols; i++) {\r\n      updatedCellStates[i] = new Array(this.props.cols);\r\n    }\r\n\r\n    //for each current cell cellState\r\n    for (let r = 0; r < this.props.rows; r++) {\r\n      for (let c = 0; c < this.props.cols; c++) {\r\n        updatedCellStates[r][c] = this.shouldLive(\r\n          this.state.cellStates[r][c], this.surroundingLivingCells(r, c)\r\n        );\r\n      }\r\n    }\r\n\r\n    this.setState({cellStates: updatedCellStates});\r\n\r\n  }\r\n\r\n  shouldLive(isAlive, livingNeighbors) {\r\n    if (isAlive) {\r\n      return (livingNeighbors === 2 || livingNeighbors === 3);\r\n    }\r\n    return livingNeighbors === 3;\r\n  }\r\n\r\n  surroundingLivingCells(r, c) {\r\n    const states = this.state.cellStates;\r\n    let num = 0;\r\n\r\n    if (r > 0 && c > 0 && states[r-1][c-1]) num++;\r\n    if (r > 0 && states[r-1][c]) num++;\r\n    if (r > 0 && c < this.props.cols-1 && states[r-1][c+1]) num++;\r\n    if (c < this.props.cols-1 && states[r][c+1]) num++;\r\n    if (r < this.props.rows-1 && c < this.props.cols-1 && states[r+1][c+1]) num++;\r\n    if (r < this.props.rows-1 && states[r+1][c]) num++;\r\n    if (r < this.props.rows-1 && c > 0 && states[r+1][c-1]) num++;\r\n    if (c > 0 && states[r][c-1]) num++;\r\n\r\n    return num;\r\n  }\r\n\r\n  handleClick(row, col) {\r\n    let updatedCellStates = this.state.cellStates.slice();\r\n    updatedCellStates[row][col] = !updatedCellStates[row][col];\r\n    this.setState({cellStates: updatedCellStates});\r\n  }\r\n\r\n  renderCell(state, row, col, key) {\r\n    return(\r\n      <Cell\r\n        key={key}\r\n        isAlive={state}\r\n        onClick={() => this.handleClick(row, col)}\r\n        row={row}\r\n        col={col}\r\n      />\r\n    )\r\n  }\r\n\r\n  render() {\r\n    //uses cellStates to populate an array of <div> elements\r\n    //each containing an array of <Cell> elements\r\n    const cells = this.state.cellStates.map(\r\n      (row, rowIndex) =>\r\n      <div className='cell-row' key={rowIndex}>\r\n        {row.map(\r\n          (state, colIndex) =>\r\n          this.renderCell(state, rowIndex, colIndex, rowIndex+\" \"+colIndex)\r\n        )}\r\n      </div>\r\n    );\r\n\r\n    return(\r\n      <div>\r\n        {cells}\r\n\r\n        <button onClick={this.updateCells}>Update Cells</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Cell(props) {\r\n  let src = props.isAlive ? 'kanye-happy.png' : 'kanye-sad.png';\r\n  return(\r\n    <img\r\n      className='cell'\r\n      onClick={props.onClick}\r\n      src={src}\r\n    />\r\n  );\r\n}\r\n\r\n// -------------------------------------------------------\r\n\r\nReactDOM.render(<Game/>, document.getElementById('root'));\r\n"],"sourceRoot":""}